#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef HYPERTRACK_SWIFT_H
#define HYPERTRACK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HyperTrack",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A grouping of errors that can be emitted during initialization.
typedef SWIFT_ENUM(NSInteger, HTFatalError, open) {
/// Publishable Key cannot be an empty string.
  HTFatalErrorDevelopmentPublishableKeyIsEmpty = -4110,
/// “Location updates” mode is not set in your target’s “Signing &
/// Capabilities”.
  HTFatalErrorDevelopmentMissingLocationUpdatesBackgroundModeCapability = -4111,
/// You are running the SDK on the iOS simulator, which currently does not
/// support CoreMotion services. You can test the SDK on real iOS devices
/// only.
  HTFatalErrorDevelopmentRunningOnSimulatorUnsupported = -4112,
/// The device doesn’t have GPS capabilities, or it is malfunctioning.
  HTFatalErrorProductionLocationServicesUnavalible = -4121,
/// The device doesn’t have Motion capabilities, or it is malfunctioning.
  HTFatalErrorProductionMotionActivityServicesUnavalible = -4122,
  HTFatalErrorProductionMotionActivityPermissionsDenied = -4123,
};


/// An object  that represents a valid metadata.
/// Currently being a valid JSON is the only requirement for HTMetadata, but
/// new requirements can be added in the future.
SWIFT_CLASS("_TtC10HyperTrack10HTMetadata")
@interface HTMetadata : NSObject
/// Creates an empty metadata.
- (nonnull instancetype)init;
/// Creates metadata from a Dictonary type.
/// \param dictionary A key-value dictionary containing types
/// representable in JSON.
///
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Creates a Metadata value from a JSON string.
/// \param jsonString A string that can be serialized to JSON.
///
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString;
@end

/// An error encountered during location tracking, after which the SDK can
/// restore tracking location during this app’s session.
typedef SWIFT_ENUM(NSInteger, HTRestorableError, open) {
/// The user denied location permissions.
  HTRestorableErrorLocationPermissionsDenied = -4200,
/// The user disabled location services systemwide.
  HTRestorableErrorLocationServicesDisabled = -4201,
/// The user disabled motion services systemwide.
  HTRestorableErrorMotionActivityServicesDisabled = -4202,
/// There was no network connection for 12 hours.
/// SDK stops collecting location data after 12 hours without a network
/// connection. It automatically resumes tracking after the connection is
/// restored.
  HTRestorableErrorNetworkConnectionUnavailable = -4203,
/// HyperTrack’s trial period has ended.
  HTRestorableErrorTrialEnded = -4204,
/// There was an error processing your payment.
  HTRestorableErrorPaymentDefault = -4205,
/// The user has not chosen whether the app can use location services.
/// SDK automatically asked for permissions.
  HTRestorableErrorLocationPermissionsNotDetermined = -4206,
/// The app is not authorized to use location services.
  HTRestorableErrorLocationPermissionsRestricted = -4207,
/// The user has not chosen whether the app can use motion activity
/// services. SDK automatically asked for permissions.
  HTRestorableErrorMotionActivityPermissionsNotDetermined = -4208,
/// Can’t start tracking in background with When In Use location
/// permissions. SDK will automatically start tracking when app will return
/// to foreground.
  HTRestorableErrorLocationPermissionsInsufficientForBackground = -4209,
/// The user has not chosen whether the app can use location services.
/// SDK can’t ask for permissions in background.
  HTRestorableErrorLocationPermissionsCantBeAskedInBackground = -4210,
/// The user has not chosen whether the app can use motion activity
/// services. SDK can’t ask for permissions in background.
  HTRestorableErrorMotionActivityPermissionsCantBeAskedInBackground = -4211,
/// Motion access is denied due to system-wide restrictions.
  HTRestorableErrorMotionActivityPermissionsRestricted = -4212,
};

@class HTSDK;
@class NSError;

SWIFT_CLASS("_TtC10HyperTrack8HTResult")
@interface HTResult : NSObject
@property (nonatomic, readonly, strong) HTSDK * _Nullable hyperTrack;
@property (nonatomic, readonly, strong) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An interface for HyperTrack SDK.
SWIFT_CLASS("_TtC10HyperTrack5HTSDK")
@interface HTSDK : NSObject
/// A notification name used for notifications emitted when SDK starts
/// tracking.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// It’s emitted when SDK records location events. If there is a stop tracking
/// event or error, <code>stoppedTrackingNotification</code> will be emitted. Every
/// <code>startedTrackingNotification</code> will have a corresponding
/// <code>stoppedTrackingNotification</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull startedTrackingNotification;)
+ (NSNotificationName _Nonnull)startedTrackingNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK stops
/// tracking.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// It’s emitted when SDK stops recording location events for any reason.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull stoppedTrackingNotification;)
+ (NSNotificationName _Nonnull)stoppedTrackingNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK encounters a
/// restorable error.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// This notication can be emitted when SDK is tracking or is asked to track,
/// but something blocks it.
/// If this notification is emitted, SDK will start tracking again after the
/// blocker is gone and if there was no command to stop during the blocker.
/// Any attempt to start tracking during the blocker will re-emit this
/// notification.
/// note:
/// Check <code>HTRestorableError</code> enum to see all types of errors emitted
/// by this notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEncounterRestorableErrorNotification;)
+ (NSNotificationName _Nonnull)didEncounterRestorableErrorNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK encounters an
/// unrestorable error.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// This notification can be emitted when SDK is tracking or is asked to
/// track, but something blocks it.
/// If this notification is emitted, SDK won’t start tracking until the app is
/// restarted.
/// Any subsequent attempt to start tracking will re-emit this notification.
/// note:
/// Check <code>HTUnrestorableError</code> enum to see all types of errors
/// emitted by this notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEncounterUnrestorableErrorNotification;)
+ (NSNotificationName _Nonnull)didEncounterUnrestorableErrorNotification SWIFT_WARN_UNUSED_RESULT;
/// A string used to identify a device uniquely.
/// <code>deviceID</code> is stored on disk and is consistent between app runs, but every
/// app reinstall will result in a new <code>deviceID</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
/// Creates an interface for the SDK.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use <code>makeSDKWithPublishableKey:</code> factory method if you need an
/// explicit error handling using <code>HTResult</code> type.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
- (nullable instancetype)initWithPublishableKey:(NSString * _Nonnull)publishableKey;
/// Creates an interface for the SDK.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use <code>makeSDKWithPublishableKey:</code> factory method if you need an
/// explicit error handling using <code>HTResult</code> type.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
/// \param automaticallyRequestPermissions if true, SDK automatically
/// triggers location and motion activity permissions dialogs when tracking
/// starts.
///
- (nullable instancetype)initWithPublishableKey:(NSString * _Nonnull)publishableKey automaticallyRequestPermissions:(BOOL)automaticallyRequestPermissions;
/// Creates and returns an SDK interface or <code>HTFatalError</code> if there are
/// blockers to successful initialization.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use initializer <code>initWithPublishableKey:</code> if you
/// don’t need to handle errors explicitly.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
///
/// returns:
/// An <code>HTResult</code> with an instance for HyperTrack SDK or an error
/// of type <code>HTFatalError</code> if there is a development or production blocker
/// to SDK initialization.
+ (HTResult * _Nonnull)makeSDKWithPublishableKey:(NSString * _Nonnull)publishableKey SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns an SDK interface or <code>HTFatalError</code> if there are
/// blockers to successful initialization.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use initializer <code>initWithPublishableKey:</code> if you
/// don’t need to handle errors explicitly.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
/// \param automaticallyRequestPermissions if true, SDK automatically
/// triggers location and motion activity permissions dialogs when tracking
/// starts.
///
///
/// returns:
/// An <code>HTResult</code> with an instance for HyperTrack SDK or an error
/// of type <code>HTFatalError</code> if there is a development or production blocker
/// to SDK initialization.
+ (HTResult * _Nonnull)makeSDKWithPublishableKey:(NSString * _Nonnull)publishableKey automaticallyRequestPermissions:(BOOL)automaticallyRequestPermissions SWIFT_WARN_UNUSED_RESULT;
/// Reflects tracking intent.
/// When SDK receives start command either using <code>start</code> method, silent
/// push notification, or with <code>syncDeviceSettings</code>, it captures this
/// intent. SDK tries to track until it receives a stop command through the
/// means described above or if it encounters one of the following errors:
/// <code>HTUnrestorableErrorInvalidPublishableKey</code>,
/// <code>HTRestorableErrorTrialEnded</code>, <code>HTRestorableErrorPaymentDefault</code>.
/// note:
/// <code>isRunning</code> only reflects an intent to track, not the actual
/// location tracking status. Location tracking can be blocked by a lack of
/// permissions or other conditions, but if there is an intent to track, it
/// will resume once those blockers are resolved. Use notifications if you
/// need to react to location tracking status.
@property (nonatomic, readonly) BOOL isRunning;
/// Sets the device name for the current device.
/// You can see the device name in the devices list in the Dashboard or
/// through APIs.
/// \param deviceName A human-readable string describing a device or its
/// user.
///
- (void)setDeviceName:(NSString * _Nonnull)deviceName;
/// Sets the device metadata for the current device.
/// You can see the device metadata in device view in Dashboard or through
/// APIs. Metadata can help you identify devices with your internal entities
/// (for example, users and their IDs).
/// \param metadata A Metadata struct that represents a valid JSON
/// object.
///
- (void)setDeviceMetadata:(HTMetadata * _Nonnull)metadata;
/// Expresses an intent to start location tracking.
/// If something is blocking the SDK from tracking (for example, the user
/// didn’t grant location permissions), the appropriate notification with the
/// corresponding error will be emitted. The SDK immediately starts tracking
/// when blockers are resolved (when user grant the permissions), no need for
/// another <code>start</code> invocation when that happens. This intent survives app
/// restarts.
- (void)start;
/// Stops location tracking immediately.
- (void)stop;
/// Synchronizes device settings with HyperTrack’s platform.
/// If you are using silent push notifications to start and end trips, this
/// method can be used as a backup when push notification delivery fails.
/// Place it in AppDelegate and additionally on screens where you expect
/// tracking to start (screens that trigger subsequent tracking, screens after
/// user login, etc.).
- (void)syncDeviceSettings;
/// Adds a new geotag.
/// Use geotags to mark a location at the current timestamp with
/// metadata. This tag can represent any custom data in your system that
/// you want to attach to location data (a moment when the delivery completed,
/// a worker checking in, etc.).
/// note:
/// Actual data is sent to servers when conditions are optimal. Calls
/// made to this API during an internet outage will be recorded and sent
/// when the connection is available.
/// \param tag A Metadata struct that represents a valid JSON
/// object.
///
- (void)addGeotag:(HTMetadata * _Nonnull)tag;
/// Registers for silent push notifications.
/// Call this method in <code>application:didFinishLaunchingWithOptions:)</code>.
+ (void)registerForRemoteNotifications;
/// Updates device token for the current device.
/// Call this method to handle successful remote notification registration
/// in <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// \param deviceToken The device token passed to
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>.
///
+ (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Tranfers the registration error to HyperTrack SDK.
/// Call this method to handle unsuccessful remote notification registration
/// in <code>application:didFailToRegisterForRemoteNotificationsWithError:</code>
/// \param error The error object passed to
/// <code>application:didFailToRegisterForRemoteNotificationsWithError:</code>
///
+ (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Tranfers the silent push notification to HyperTrack SDK.
/// Call this method to handle a silent push notification in
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code>
/// note:
/// SDK ignores push notifications meant for your app, but if you want
/// to make sure it doesn’t receive them use “hypertrack” key inside the
/// <code>userInfo</code> object:
/// \code
/// if (userInfo[@"hypertrack"] != nil) {
///     // This is HyperTrack's notification
///     [HTSDK didReceiveRemoteNotification: userInfo
///                  fetchCompletionHandler: completionHandler];
/// } else {
///     // Handle your server's notification here
/// }
///
/// \endcode\param userInfo The <code>userInfo</code> dictionary passed to
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
///
/// \param completionHandler The handler function passed to
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code>
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
- (void)addTripMarker:(HTMetadata * _Nonnull)marker SWIFT_DEPRECATED_MSG("Use addGeoTag: instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HTUnrestorableError, open) {
/// Publishable Key wan’t found in HyperTrack’s database.
/// This error shouldn’t happen in production, but due to its asynchronous
/// nature, it can be detected only during tracking. SDK stops all functions
/// until the app is recompiled with the correct Publishable Key.
  HTUnrestorableErrorInvalidPublishableKey = -4300,
/// Motion activity permissions denied after SDK’s initialization. Granting
/// them will restart the app, so in effect, they are denied during this app’s
/// session.
  HTUnrestorableErrorMotionActivityPermissionsDenied = -4301,
};


@interface NSError (SWIFT_EXTENSION(HyperTrack))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTFatalErrorDomain;)
+ (NSString * _Nonnull)HTFatalErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTRestorableErrorDomain;)
+ (NSString * _Nonnull)HTRestorableErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTUnrestorableErrorDomain;)
+ (NSString * _Nonnull)HTUnrestorableErrorDomain SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSNotification (SWIFT_EXTENSION(HyperTrack))
/// A convenience function that recovers either <code>HTRestorableError</code> or
/// <code>HTUnrestorableError</code> from a Notification. Use this function if you are
/// subscribed to both notifications in the same selector.
- (NSError * _Nullable)hyperTrackTrackingError SWIFT_WARN_UNUSED_RESULT;
/// A convenience function that recovers the <code>HTRestorableError</code> from
/// Notification.
- (NSError * _Nullable)hyperTrackRestorableError SWIFT_WARN_UNUSED_RESULT;
/// A convenience function that recovers the <code>HTUnrestorableError</code> from
/// Notification.
- (NSError * _Nullable)hyperTrackUnrestorableError SWIFT_WARN_UNUSED_RESULT;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef HYPERTRACK_SWIFT_H
#define HYPERTRACK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HyperTrack",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A grouping of errors that can be emitted during initialization.
typedef SWIFT_ENUM(NSInteger, HTFatalError, open) {
/// Publishable Key cannot be an empty string.
  HTFatalErrorDevelopmentPublishableKeyIsEmpty = -4110,
/// “Location updates” mode is not set in your target’s “Signing &
/// Capabilities”.
  HTFatalErrorDevelopmentMissingLocationUpdatesBackgroundModeCapability = -4111,
/// You are running the SDK on the iOS simulator, which currently does not
/// support CoreMotion services. You can test the SDK on real iOS devices
/// only.
  HTFatalErrorDevelopmentRunningOnSimulatorUnsupported = -4112,
/// The device doesn’t have GPS capabilities, or it is malfunctioning.
  HTFatalErrorProductionLocationServicesUnavalible = -4121,
/// The device doesn’t have Motion capabilities, or it is malfunctioning.
  HTFatalErrorProductionMotionActivityServicesUnavalible = -4122,
  HTFatalErrorProductionMotionActivityPermissionsDenied = -4123,
};


/// An object  that represents a valid metadata.
/// Currently being a valid JSON is the only requirement for HTMetadata, but
/// new requirements can be added in the future.
SWIFT_CLASS("_TtC10HyperTrack10HTMetadata")
@interface HTMetadata : NSObject
/// Creates an empty metadata.
- (nonnull instancetype)init;
/// Creates metadata from a Dictonary type.
/// \param dictionary A key-value dictionary containing types
/// representable in JSON.
///
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Creates a Metadata value from a JSON string.
/// \param jsonString A string that can be serialized to JSON.
///
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString;
@end

/// An error encountered during location tracking, after which the SDK can
/// restore tracking location during this app’s session.
typedef SWIFT_ENUM(NSInteger, HTRestorableError, open) {
/// The user denied location permissions.
  HTRestorableErrorLocationPermissionsDenied = -4200,
/// The user disabled location services systemwide.
  HTRestorableErrorLocationServicesDisabled = -4201,
/// The user disabled motion services systemwide.
  HTRestorableErrorMotionActivityServicesDisabled = -4202,
/// There was no network connection for 12 hours.
/// SDK stops collecting location data after 12 hours without a network
/// connection. It automatically resumes tracking after the connection is
/// restored.
  HTRestorableErrorNetworkConnectionUnavailable = -4203,
/// HyperTrack’s trial period has ended.
  HTRestorableErrorTrialEnded = -4204,
/// There was an error processing your payment.
  HTRestorableErrorPaymentDefault = -4205,
/// The user has not chosen whether the app can use location services.
/// SDK automatically asked for permissions.
  HTRestorableErrorLocationPermissionsNotDetermined = -4206,
/// The app is not authorized to use location services.
  HTRestorableErrorLocationPermissionsRestricted = -4207,
/// The user has not chosen whether the app can use motion activity
/// services. SDK automatically asked for permissions.
  HTRestorableErrorMotionActivityPermissionsNotDetermined = -4208,
/// Can’t start tracking in background with When In Use location
/// permissions. SDK will automatically start tracking when app will return
/// to foreground.
  HTRestorableErrorLocationPermissionsInsufficientForBackground = -4209,
/// The user has not chosen whether the app can use location services.
/// SDK can’t ask for permissions in background.
  HTRestorableErrorLocationPermissionsCantBeAskedInBackground = -4210,
/// The user has not chosen whether the app can use motion activity
/// services. SDK can’t ask for permissions in background.
  HTRestorableErrorMotionActivityPermissionsCantBeAskedInBackground = -4211,
/// Motion access is denied due to system-wide restrictions.
  HTRestorableErrorMotionActivityPermissionsRestricted = -4212,
};

@class HTSDK;
@class NSError;

SWIFT_CLASS("_TtC10HyperTrack8HTResult")
@interface HTResult : NSObject
@property (nonatomic, readonly, strong) HTSDK * _Nullable hyperTrack;
@property (nonatomic, readonly, strong) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An interface for HyperTrack SDK.
SWIFT_CLASS("_TtC10HyperTrack5HTSDK")
@interface HTSDK : NSObject
/// A notification name used for notifications emitted when SDK starts
/// tracking.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// It’s emitted when SDK records location events. If there is a stop tracking
/// event or error, <code>stoppedTrackingNotification</code> will be emitted. Every
/// <code>startedTrackingNotification</code> will have a corresponding
/// <code>stoppedTrackingNotification</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull startedTrackingNotification;)
+ (NSNotificationName _Nonnull)startedTrackingNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK stops
/// tracking.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// It’s emitted when SDK stops recording location events for any reason.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull stoppedTrackingNotification;)
+ (NSNotificationName _Nonnull)stoppedTrackingNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK encounters a
/// restorable error.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// This notication can be emitted when SDK is tracking or is asked to track,
/// but something blocks it.
/// If this notification is emitted, SDK will start tracking again after the
/// blocker is gone and if there was no command to stop during the blocker.
/// Any attempt to start tracking during the blocker will re-emit this
/// notification.
/// note:
/// Check <code>HTRestorableError</code> enum to see all types of errors emitted
/// by this notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEncounterRestorableErrorNotification;)
+ (NSNotificationName _Nonnull)didEncounterRestorableErrorNotification SWIFT_WARN_UNUSED_RESULT;
/// A notification name used for notifications emitted when SDK encounters an
/// unrestorable error.
/// Subscribe to this notification to update the UI or trigger custom business
/// logic.
/// This notification can be emitted when SDK is tracking or is asked to
/// track, but something blocks it.
/// If this notification is emitted, SDK won’t start tracking until the app is
/// restarted.
/// Any subsequent attempt to start tracking will re-emit this notification.
/// note:
/// Check <code>HTUnrestorableError</code> enum to see all types of errors
/// emitted by this notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEncounterUnrestorableErrorNotification;)
+ (NSNotificationName _Nonnull)didEncounterUnrestorableErrorNotification SWIFT_WARN_UNUSED_RESULT;
/// A string used to identify a device uniquely.
/// <code>deviceID</code> is stored on disk and is consistent between app runs, but every
/// app reinstall will result in a new <code>deviceID</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
/// Creates an interface for the SDK.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use <code>makeSDKWithPublishableKey:</code> factory method if you need an
/// explicit error handling using <code>HTResult</code> type.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
- (nullable instancetype)initWithPublishableKey:(NSString * _Nonnull)publishableKey;
/// Creates an interface for the SDK.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use <code>makeSDKWithPublishableKey:</code> factory method if you need an
/// explicit error handling using <code>HTResult</code> type.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
/// \param automaticallyRequestPermissions if true, SDK automatically
/// triggers location and motion activity permissions dialogs when tracking
/// starts.
///
- (nullable instancetype)initWithPublishableKey:(NSString * _Nonnull)publishableKey automaticallyRequestPermissions:(BOOL)automaticallyRequestPermissions;
/// Creates and returns an SDK interface or <code>HTFatalError</code> if there are
/// blockers to successful initialization.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use initializer <code>initWithPublishableKey:</code> if you
/// don’t need to handle errors explicitly.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
///
/// returns:
/// An <code>HTResult</code> with an instance for HyperTrack SDK or an error
/// of type <code>HTFatalError</code> if there is a development or production blocker
/// to SDK initialization.
+ (HTResult * _Nonnull)makeSDKWithPublishableKey:(NSString * _Nonnull)publishableKey SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns an SDK interface or <code>HTFatalError</code> if there are
/// blockers to successful initialization.
/// Multiple interfaces can be created without duplicating memory and
/// resources.
/// note:
/// Use initializer <code>initWithPublishableKey:</code> if you
/// don’t need to handle errors explicitly.
/// \param publishableKey a non-empty string of  publishable key
/// provided in HyperTrack’s dashboard
/// <a href="https://dashboard.hypertrack.com/setup">setup page</a>.
///
/// \param automaticallyRequestPermissions if true, SDK automatically
/// triggers location and motion activity permissions dialogs when tracking
/// starts.
///
///
/// returns:
/// An <code>HTResult</code> with an instance for HyperTrack SDK or an error
/// of type <code>HTFatalError</code> if there is a development or production blocker
/// to SDK initialization.
+ (HTResult * _Nonnull)makeSDKWithPublishableKey:(NSString * _Nonnull)publishableKey automaticallyRequestPermissions:(BOOL)automaticallyRequestPermissions SWIFT_WARN_UNUSED_RESULT;
/// Reflects tracking intent.
/// When SDK receives start command either using <code>start</code> method, silent
/// push notification, or with <code>syncDeviceSettings</code>, it captures this
/// intent. SDK tries to track until it receives a stop command through the
/// means described above or if it encounters one of the following errors:
/// <code>HTUnrestorableErrorInvalidPublishableKey</code>,
/// <code>HTRestorableErrorTrialEnded</code>, <code>HTRestorableErrorPaymentDefault</code>.
/// note:
/// <code>isRunning</code> only reflects an intent to track, not the actual
/// location tracking status. Location tracking can be blocked by a lack of
/// permissions or other conditions, but if there is an intent to track, it
/// will resume once those blockers are resolved. Use notifications if you
/// need to react to location tracking status.
@property (nonatomic, readonly) BOOL isRunning;
/// Sets the device name for the current device.
/// You can see the device name in the devices list in the Dashboard or
/// through APIs.
/// \param deviceName A human-readable string describing a device or its
/// user.
///
- (void)setDeviceName:(NSString * _Nonnull)deviceName;
/// Sets the device metadata for the current device.
/// You can see the device metadata in device view in Dashboard or through
/// APIs. Metadata can help you identify devices with your internal entities
/// (for example, users and their IDs).
/// \param metadata A Metadata struct that represents a valid JSON
/// object.
///
- (void)setDeviceMetadata:(HTMetadata * _Nonnull)metadata;
/// Expresses an intent to start location tracking.
/// If something is blocking the SDK from tracking (for example, the user
/// didn’t grant location permissions), the appropriate notification with the
/// corresponding error will be emitted. The SDK immediately starts tracking
/// when blockers are resolved (when user grant the permissions), no need for
/// another <code>start</code> invocation when that happens. This intent survives app
/// restarts.
- (void)start;
/// Stops location tracking immediately.
- (void)stop;
/// Synchronizes device settings with HyperTrack’s platform.
/// If you are using silent push notifications to start and end trips, this
/// method can be used as a backup when push notification delivery fails.
/// Place it in AppDelegate and additionally on screens where you expect
/// tracking to start (screens that trigger subsequent tracking, screens after
/// user login, etc.).
- (void)syncDeviceSettings;
/// Adds a new geotag.
/// Use geotags to mark a location at the current timestamp with
/// metadata. This tag can represent any custom data in your system that
/// you want to attach to location data (a moment when the delivery completed,
/// a worker checking in, etc.).
/// note:
/// Actual data is sent to servers when conditions are optimal. Calls
/// made to this API during an internet outage will be recorded and sent
/// when the connection is available.
/// \param tag A Metadata struct that represents a valid JSON
/// object.
///
- (void)addGeotag:(HTMetadata * _Nonnull)tag;
/// Registers for silent push notifications.
/// Call this method in <code>application:didFinishLaunchingWithOptions:)</code>.
+ (void)registerForRemoteNotifications;
/// Updates device token for the current device.
/// Call this method to handle successful remote notification registration
/// in <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// \param deviceToken The device token passed to
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>.
///
+ (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Tranfers the registration error to HyperTrack SDK.
/// Call this method to handle unsuccessful remote notification registration
/// in <code>application:didFailToRegisterForRemoteNotificationsWithError:</code>
/// \param error The error object passed to
/// <code>application:didFailToRegisterForRemoteNotificationsWithError:</code>
///
+ (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Tranfers the silent push notification to HyperTrack SDK.
/// Call this method to handle a silent push notification in
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code>
/// note:
/// SDK ignores push notifications meant for your app, but if you want
/// to make sure it doesn’t receive them use “hypertrack” key inside the
/// <code>userInfo</code> object:
/// \code
/// if (userInfo[@"hypertrack"] != nil) {
///     // This is HyperTrack's notification
///     [HTSDK didReceiveRemoteNotification: userInfo
///                  fetchCompletionHandler: completionHandler];
/// } else {
///     // Handle your server's notification here
/// }
///
/// \endcode\param userInfo The <code>userInfo</code> dictionary passed to
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
///
/// \param completionHandler The handler function passed to
/// <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code>
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
- (void)addTripMarker:(HTMetadata * _Nonnull)marker SWIFT_DEPRECATED_MSG("Use addGeoTag: instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HTUnrestorableError, open) {
/// Publishable Key wan’t found in HyperTrack’s database.
/// This error shouldn’t happen in production, but due to its asynchronous
/// nature, it can be detected only during tracking. SDK stops all functions
/// until the app is recompiled with the correct Publishable Key.
  HTUnrestorableErrorInvalidPublishableKey = -4300,
/// Motion activity permissions denied after SDK’s initialization. Granting
/// them will restart the app, so in effect, they are denied during this app’s
/// session.
  HTUnrestorableErrorMotionActivityPermissionsDenied = -4301,
};


@interface NSError (SWIFT_EXTENSION(HyperTrack))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTFatalErrorDomain;)
+ (NSString * _Nonnull)HTFatalErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTRestorableErrorDomain;)
+ (NSString * _Nonnull)HTRestorableErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTUnrestorableErrorDomain;)
+ (NSString * _Nonnull)HTUnrestorableErrorDomain SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSNotification (SWIFT_EXTENSION(HyperTrack))
/// A convenience function that recovers either <code>HTRestorableError</code> or
/// <code>HTUnrestorableError</code> from a Notification. Use this function if you are
/// subscribed to both notifications in the same selector.
- (NSError * _Nullable)hyperTrackTrackingError SWIFT_WARN_UNUSED_RESULT;
/// A convenience function that recovers the <code>HTRestorableError</code> from
/// Notification.
- (NSError * _Nullable)hyperTrackRestorableError SWIFT_WARN_UNUSED_RESULT;
/// A convenience function that recovers the <code>HTUnrestorableError</code> from
/// Notification.
- (NSError * _Nullable)hyperTrackUnrestorableError SWIFT_WARN_UNUSED_RESULT;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
